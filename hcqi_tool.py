# -*- coding: utf-8 -*-
"""
/***************************************************************************
 HcqiTool
                                 A QGIS plugin
 An open source GIS application for spatial analysis of health care quality indicators
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-11-06
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Duarte et al
        email                : liaduarte@fc.up.pt
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QFileInfo, QSize
from PyQt5.QtGui import QIcon, QFont
from PyQt5.QtWidgets import QAction
from PyQt5.QtWidgets import *
from qgis.core import *
from qgis.core import QgsVectorLayer, QgsDataSourceUri
from qgis.gui import *
from qgis.utils import iface
import csv
from PyQt5.QtSql import *
import os.path
from processing.core.Processing import Processing
import subprocess
from . import GdalTools_utils as Utils

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .hcqi_tool_dialog import HcqiToolDialog
from .hcqi_window_kml import Ui_Dialog
from .hcqi_window_bar import Ui_Dialog2
import os.path


#diretory_home = os.path.dirname(os.path.realpath(__file__))
SYS_DIR  = "C:/OSGeo4W64/apps"
QGIS_DIR = os.path.join(SYS_DIR, 'qgis')
POSTGIS_DIR = "C:\Program Files\PostgreSQL/12/bin/pgsql2shp.exe"


class HcqiTool:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'HcqiTool_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&HCQI Tool')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.dlg = HcqiToolDialog()

        self.window2 = None
        self.window = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('HcqiTool', message)

    def handleButton(self):
        if self.window2 is None:
            self.window2 = Window()
        self.window2.show()
        canvas = iface.mapCanvas()
        layers = canvas.layers()
        list_l = []
        for l in layers:
            name = l.name()
            list_l.append(name)
        self.window2.comboBox.addItems(list_l)
        self.window2.pushButton.clicked.connect(self.kml)
        self.window2.pushButton_2.clicked.connect(self.browse)

    def handleButtonbar(self):
        if self.window is None:
            self.window = Window_bar()
        self.window.show()
        canvas = iface.mapCanvas()
        layers = canvas.layers()
        list_l = []
        for l in layers:
            name = l.name()
            list_l.append(name)

        self.inputLayer = QGIS_DIR + '/python/plugins/hcqi_tool/data_pqi.xlsx'
        self.layer = QgsVectorLayer(self.inputLayer, "distritos", "ogr")
        fields = self.layer.fields()
        self.field_names = list([field.name() for field in fields])
        #QMessageBox.about(self.dlg.checkBox, 'teste', str(self.field_names))
        self.window.comboBox.addItems(['Aveiro', 'Beja', 'Braga','Bragança','Castelo Branco','Coimbra','Évora','Faro','Guarda','Leiria','Lisboa','Portalegre','Porto','Santarém','Setúbal','Viana do Castelo','Vila Real','Viseu'])

        #self.window.comboBox_3.addItems(self.field_names)
        #self.window.comboBox_2.addItems(self.field_names)

        self.window.pushButton.clicked.connect(self.createBar)
        #self.window.pushButton_2.clicked.connect(self.browse2)

        # layer to canvas
        self.inputLayer = QGIS_DIR + '/python/plugins/hcqi_tool/data_pqi.xlsx'
        self.layer = QgsVectorLayer(self.inputLayer, "distritos", "ogr")
        fields = self.layer.fields()
        self.field_names = [field.name() for field in fields]
        # QMessageBox.about(self.dlg.checkBox, 'teste', str(self.field_names))
        # self.dlg.comboBox.addItems(self.field_names)

        # add pqi and year to filter
        features_pqi = []
        features_year = []

        for feat in self.layer.getFeatures():
            features_pqi = features_pqi + [feat['pqi']]
            features_year = features_year + [feat['chrono']]

        self.window.comboBox_2.addItems(list(set(features_pqi)))

    def createBar(self):


        #get year list for xx
        #year_list = list(set(features_year))
        #QMessageBox.about(self.dlg.checkBox, 'teste', str(year_list.sort()))

        layer = iface.activeLayer()
        uri = QgsDataSourceUri()
        uri.setConnection("localhost", "5432", "MED", "postgres", "postgres")
        uri.setDataSource("public", "distritos", "geom", '', "gid")

        # now query the table
        db = QSqlDatabase.addDatabase("QPSQL");
        db.setDatabaseName(uri.database())
        db.setPort(int(uri.port()))
        db.setUserName(uri.username())
        db.setPassword(uri.password())
        db.open()

        PQI_code = self.window.comboBox_2.currentText()
        dist = self.window.comboBox.currentText()

        import os
        directory = 'C:\OSGeo4W64/apps\qgis\python\plugins\hcqi_tool'
        with open(os.path.join(directory, 'plot.bat'), 'w') as OPATH:
            OPATH.writelines(['SET Path=%WINDIR%\system32;%WINDIR%;%WINDIR%\System32\Wbem;&',
                              'C:/"Program Files"/PostgreSQL/12/bin/pgsql2shp.exe -f C:/Users/Lia/AppData/Roaming/QGIS/QGIS3/profiles/default/layer_plot.shp -u postgres -P postgres MED "SELECT distritos.distrito,data_pqi.valor_pqi,data_pqi.chrono,geom FROM data_pqi INNER JOIN distritos ON data_pqi.geo=distritos.distrito WHERE (data_pqi.pqi=' + "'" + str(
                                  str(PQI_code)) + "'" + ' AND data_pqi.geo=' + "'" + str(
                                  dist) + "'" + ') GROUP BY distritos.distrito, data_pqi.valor_pqi, data_pqi.chrono, distritos.geom ORDER BY distritos.distrito"'])
        # QMessageBox.about(self.dlg.checkBox, 'teste', str('yes'))
        # layer = QFileInfo(QgsApplication.qgisUserDatabaseFilePath()).path() + "/layer_average.shp"
        # os.system(os.path.join(QGIS_DIR, "python/plugins/hcqi_tool/average.bat"))
        os.system(os.path.join(QGIS_DIR, "python/plugins/hcqi_tool/plot.bat"))

        my_shp = 'C:/Users/Lia/AppData/Roaming/QGIS/QGIS3/profiles/default/layer_plot.shp'
        self.layer = QgsVectorLayer(my_shp, "layer_plot", "ogr")
        fields = self.layer.fields()
        self.field_names = [field.name() for field in fields]
        #QMessageBox.about(self.dlg.checkBox, 'teste', str(self.field_names))

        # add pqi and year to filter
        features_pqi = []
        features_year = []

        for feat in self.layer.getFeatures():
            features_pqi = features_pqi + [feat['valor_pqi']]
            features_year = features_year + [feat['chrono']]
        #QMessageBox.about(self.dlg.checkBox, 'teste', str(features_pqi))
        #QMessageBox.about(self.dlg.checkBox, 'teste', str(features_year))
        # construir dicionario e fazer média

        dictionary = [(i, j) for i, j in zip(features_year, features_pqi)]
        #dictionary = dict(zip(features_year, features_pqi))
        #QMessageBox.about(self.dlg.checkBox, 'teste', str(dictionary))

        # find repeated elements in dictionary and sum
        d = {x: 0 for x, _ in dictionary}

        for name, num in dictionary: d[name] += num

        # using map
        Output = list(map(tuple, d.items()))
        #QMessageBox.about(self.dlg.checkBox, 'teste', str(Output[0]))

        #sort tuples by key
        sort_output = Output.sort()
        #QMessageBox.about(self.dlg.checkBox, 'teste', str(sort_output))

        keys = [ele for key in Output for ele in key]
        #QMessageBox.about(self.dlg.checkBox, 'teste', str(keys))

        # canvas = iface.mapCanvas()
        # layers = canvas.layers()
        # list_l = []
        # for l in layers:
        #     name = l.name()
        #     list_l.append(name)

        import matplotlib.pyplot as plt
        import numpy as np

        # Prepare the data
        x = []
        y = []
        for u in range(0,len(keys),2):
            #QMessageBox.about(self.dlg.checkBox, 'teste', str(keys[u]))
            x.append(keys[u])
            y.append(keys[u+1])
            #QMessageBox.about(self.dlg.checkBox, 'teste', str(x))
            #QMessageBox.about(self.dlg.checkBox, 'teste', str(y))

        # Plot the data
        plt.plot(x, y, label='PQI')
        plt.title('PQI02')
        plt.xlabel('Year')
        plt.ylabel('Hospitalizations per 1000 admissions')

        # Add a legend
        plt.legend()

        # Show the plot
        plt.show()

        # Processing.initialize()
        # Processing.runAlgorithm("qgis:barplot",
        #                {'INPUT': input,
        #                 'NAME_FIELD': x_field, 'VALUE_FIELD': y_field, 'OUTPUT': output})
        # QMessageBox.information(None, "FINISH:", str('The plot bar was created'))

    def browse(self):
        outputFile, encoding = QFileDialog.getSaveFileName()
        #outputFile = Utils.FileDialog.getSaveFileName()
        self.window2.comboBox_2.addItem(str(outputFile))

    def browse2(self):
        outputFile, encoding = QFileDialog.getSaveFileName()
        #outputFile = Utils.FileDialog.getSaveFileName()
        self.window.comboBox_4.addItem(str(outputFile))

    def kml(self):
        # get shapefile
        #self.window2.comboBox.clear()
        canvas = iface.mapCanvas()
        layers = canvas.layers()
        list_l = []
        out = self.window2.comboBox_2.currentText()
        for l in layers:
            lay = self.window2.comboBox.currentText()
            # QMessageBox.about(self.dlg.checkBox, 'teste', str(l.name()))
            # QMessageBox.about(self.dlg.checkBox, 'teste', str(lay))
            if str(l.name()) == str(lay):
                #QMessageBox.about(self.dlg.checkBox, 'teste', str('yes'))
            #     subprocess.call(['ogr2ogr', '-f', 'KML', str(out), str(l.source())])

                import os
                directory = 'C:\OSGeo4W64/apps\qgis\python\plugins\hcqi_tool'
                with open(os.path.join(directory, 'kml.bat'), 'w') as OPATH:
                    OPATH.writelines(['SET Path=%WINDIR%\system32;%WINDIR%;%WINDIR%\System32\Wbem;&',
                                      ' ogr2ogr -f KML ' + str(out) + ' ' + str(l.source())])
                # QMessageBox.about(self.dlg.checkBox, 'teste', str('yes'))
                # layer = QFileInfo(QgsApplication.qgisUserDatabaseFilePath()).path() + "/layer_average.shp"
                # os.system(os.path.join(QGIS_DIR, "python/plugins/hcqi_tool/average.bat"))
                os.system(os.path.join(QGIS_DIR, "python/plugins/hcqi_tool/kml.bat"))
        QMessageBox.information(None, "FINISH:", str('KML file was created'))

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/hcqi_tool/icon.png'

        # self.inputLayer = 'C:/OSGeo4W64/apps/qgis/python/plugins/HospitalData/sample_reside_join.dbf'
        #self.inputLayer = QGIS_DIR + '/python/plugins/HospitalData/book.dbf'
        # QMessageBox.about(self.dlg.checkBox, 'teste', str(self.inputLayer))
        # self.layer = QgsVectorLayer(unicode(self.inputLayer).encode('utf8'), self.inputLayer, "ogr")
        # features = self.layer.selectedFeatures()
        # fields = self.layer.pendingFields()
        # self.field_names = [field.name() for field in fields]
        # # QMessageBox.about(self.dlg.checkBox, 'teste', str(field_names))
        # # add attributes to combobox
        # self.dlg.comboBox.addItems(self.field_names)





        self.add_action(
            icon_path,
            text=self.tr(u'An open source GIS application for spatial analysis of health care quality indicators'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def addMap(self):
        from qgis.utils import iface

        if self.dlg.checkBox.isChecked():
            mapProvider = 'Bing Maps'  # also use e.g. 'OpenStreetMap', 'Bing Maps' etc. as given in the Web->OpenLayers plugin menu
            openLayersMap = 'Bing Aerial'  # also use e.g. 'Google Streets', 'OpenStreetMap', 'Bing Road' etc. as given in the Web->OpenLayers plugin menu

            webMenu = iface.webMenu()  # get object of the Web menu of QGIS
            #QMessageBox.about(self.dlg, 'teste', str(webMenu))

            for webMenuItem in webMenu.actions():  # open the Web menu of QGIS and loop through the list of web plugins
                if 'OpenLayers plugin' in webMenuItem.text():  # look for OpenLayers plugin entry in the Web menu
                    openLayersMenu = webMenuItem  # and open it

                    for openLayersMenuItem in openLayersMenu.menu().actions():  # open the OpenLayers plugin menu entry and loop through the list of map providers
                        if mapProvider in openLayersMenuItem.text():  # if the desired mapProvider is found
                            mapProviderMenu = openLayersMenuItem  # open its menu entry

                            for map in mapProviderMenu.menu().actions():  # loop through the list of maps for the opened provider
                                if openLayersMap in map.text():  # if the desired map entry is found
                                    map.trigger()  # click the entry to load the map as a layer
                                    mw = iface.mainWindow()

            # get the layers in table of contents and display the shapefile on the top
            mw = iface.mainWindow()

            canvas = iface.mapCanvas()
            layers = canvas.layers()
            #QMessageBox.about(self.dlg, 'teste', str(layers))

            # Get a reference of the layer tree
            root = QgsProject.instance().layerTreeRoot()

            for i in layers:
                # QMessageBox.about(self.dlg.checkBox, 'teste', str(i))
                if i.name() == "layer":
                    alayer = i
                    # Move alayer
                    myalayer = root.findLayer(alayer.id())
                    myClone = myalayer.clone()
                    parent = myalayer.parent()
                    parent.insertChildNode(0, myClone)
                    parent.removeChildNode(myalayer)
                else:
                    blayer = i
                    # Move blayer
                    myblayer = root.findLayer(blayer.id())
                    myClone = myblayer.clone()
                    parent = myblayer.parent()
                    parent.insertChildNode(1, myClone)
                    parent.removeChildNode(myblayer)

        if self.dlg.checkBox_2.isChecked():
            # add result into canvas
            hospital = str(os.path.join(QGIS_DIR,'python\plugins\hcqi_tool\hospitais_etrs89.shp'))
            # QMessageBox.about(self, "teste", str(file_info_norm))
            hosp_layer = QgsVectorLayer(hospital, 'Hospital facilities', 'ogr')
            # QMessageBox.about(self, "teste", str(rlayer_new_norm))
            QgsProject.instance().addMapLayer(hosp_layer)
            vLayer = iface.activeLayer()
            canvas = iface.mapCanvas()
            extent = vLayer.extent()
            canvas.setExtent(extent)

        if self.dlg.checkBox_3.isChecked():
            # add result into canvas
            health_care = str(os.path.join(QGIS_DIR,'python\plugins\hcqi_tool\centros_saude_etrs89_certo.shp'))
            # QMessageBox.about(self, "teste", str(file_info_norm))
            health_care_layer = QgsVectorLayer(health_care, 'Health care facilities', 'ogr')
            # QMessageBox.about(self, "teste", str(rlayer_new_norm))
            QgsProject.instance().addMapLayer(health_care_layer)




    def classify(self):

        # open bing aerial maps from open layers
        # if self.dlg.checkBox.isChecked():
        #     # QMessageBox.about(self.dlg.checkBox,'teste', str('hello'))
        #     mapProvider = 'Bing Maps'  # also use e.g. 'OpenStreetMap', 'Bing Maps' etc. as given in the Web->OpenLayers plugin menu
        #     openLayersMap = 'Bing Aerial'  # also use e.g. 'Google Streets', 'OpenStreetMap', 'Bing Road' etc. as given in the Web->OpenLayers plugin menu
        #
        #     webMenu = iface.webMenu()  # get object of the Web menu of QGIS
        #     # QMessageBox.about(self.dlg.checkBox, 'teste', str(webMenu))
        #
        #     for webMenuItem in webMenu.actions():  # open the Web menu of QGIS and loop through the list of web plugins
        #         if 'OpenLayers plugin' in webMenuItem.text():  # look for OpenLayers plugin entry in the Web menu
        #             openLayersMenu = webMenuItem  # and open it
        #
        #             for openLayersMenuItem in openLayersMenu.menu().actions():  # open the OpenLayers plugin menu entry and loop through the list of map providers
        #                 if mapProvider in openLayersMenuItem.text():  # if the desired mapProvider is found
        #                     mapProviderMenu = openLayersMenuItem  # open its menu entry
        #
        #                     for map in mapProviderMenu.menu().actions():  # loop through the list of maps for the opened provider
        #                         if openLayersMap in map.text():  # if the desired map entry is found
        #                             map.trigger()  # click the entry to load the map as a layer

            # self.dlg.webView.setHtml('C:\OSGeo4W64\apps\qgis\python\plugins\hospitalization\Bing Mapas.html')

        if self.dlg.comboBox_2.currentText() == 'Categorized':
            self.symbology_categorized(self.layer)

        if self.dlg.comboBox_2.currentText() == 'Graduated':
            self.itemsList = []
            attribute = 'sample_r37'
            # get values from attribute
            n = len(self.field_names)
            for i in range(0, n):
                f = self.field_names[i]
                if f == str(attribute):
                    number = i
                    for feat in self.layer.getFeatures():
                        attrb = feat.attributes()
                        attribute_read = attrb[number]  # reads the attribute one by one
                        self.itemsList = self.itemsList + [unicode(attribute_read).encode("utf-8")]
                        # self.itemsList = self.itemsList + [str(attribute_read)]
            lista_attributes = self.itemsList
            # list without duplicates
            woduplicates = list(set(lista_attributes))
            # QMessageBox.about(self.dlg.checkBox, 'teste', str(woduplicates))
            self.symbology_graduated(self.layer)

    def symbology_categorized(self, layer):

        # connect to PostGIS database with the municipalities and the data table
        layer = iface.activeLayer()
        uri = QgsDataSourceUri()
        uri.setConnection("localhost", "5432", "MED", "postgres", "postgres")
        uri.setDataSource("public", "distritos2", "geom", '', "gid")

        # now query the table
        db = QSqlDatabase.addDatabase("QPSQL");
        db.setDatabaseName(uri.database())
        db.setPort(int(uri.port()))
        db.setUserName(uri.username())
        db.setPassword(uri.password())
        # QMessageBox.about(self.dlg.checkBox, 'teste', str(uri.database()))
        # QMessageBox.about(self.dlg.checkBox, 'teste', str(uri.port()))
        # QMessageBox.about(self.dlg.checkBox, 'teste', str(uri.username()))
        # QMessageBox.about(self.dlg.checkBox, 'teste', str(uri.password()))
        db.open()

        # get attribute
        attribute = self.dlg.comboBox.currentText()
        # get values from attribute
        # n = len(self.field_names)
        # lista_attrib = []
        # for i in range(0,n):
        # f = self.field_names[i]
        # if f==str(attribute):
        # number = i
        # for feat in layer.getFeatures():
        # attrb = feat.attributes()
        # attribute_read = attrb[number] #reads the attribute one by one
        # lista_attrib = lista_attrib + [str(attribute_read)]
        # lista_attributes = lista_attrib
        ## list without duplicates
        # woduplicates = list(set(lista_attributes))
        #QMessageBox.about(self.dlg.checkBox, 'teste', str(attribute))

        if attribute == 'ANO':
            if self.ANO is None:
                self.ANO = year_attrib()
            self.ANO.show()



            # create tuple with the colors and the fields
        # list_color = ["yellow", "darkcyan", "red", "grey"]
        ##list_fields = woduplicates
        # list_fields = ['1', '2', '6', " "]
        # dicti = {'1':('yellow','1'), '2':('darkcyan','2'), '6':('red', '6'), '':("grey", ' ')}
        # tuples = zip(list_color, list_fields)
        ## get attributes
        # attrb = woduplicates
        ## create dict with the tuples and the attributes
        # attribute_sym = dict(zip(attrb, tuples))
        # QMessageBox.about(self.dlg.checkBox, 'teste', str(attribute_sym))
        ## symbolize
        # categories = []

        ## get default style
        # myStyle = QgsStyleV2().defaultStyle()
        ##QMessageBox.about(self.dlg.checkBox, 'teste', str(myStyle))
        ### get a list of default color ramps [u'Blues', u'BrBG', u'BuGn'....]
        # defaultColorRampNames = myStyle.colorRampNames()
        ##QMessageBox.about(self.dlg.checkBox, 'teste', str(defaultColorRampNames))
        ### setting ramp to Blues, first index of defaultColorRampNames
        # ramp = myStyle.colorRamp(defaultColorRampNames[0])
        ##pr = ramp.properties()
        ##QMessageBox.about(self.dlg.checkBox, 'teste', str(pr))
        ## set up an empty categorized renderer and assign the color ramp
        # self.field = self.dlg.comboBox.currentText()
        # renderer = QgsCategorizedSymbolRendererV2(self.field, [])
        # renderer.setSourceColorRamp(ramp)
        # layer.setRendererV2(renderer)

        # converter string para numeric
        #subprocess.call('ALTER TABLE sample_reside_join ALTER COLUMN totdias TYPE integer USING (trim(totdias)::integer);')

        # subprocess.call('"C:\Program Files\PostgreSQL/12/bin/pgsql2shp.exe" -f ' + '"C:\Users\Lia\Desktop/categorized.shp" ' + '-h localhost -p 5432 -u postgres -P postgres LIA ' + '"SELECT freguesia, mode(ADM_TIP), geom FROM grande_porto LEFT OUTER JOIN sample_reside_join ON grande_porto.dicofre = sample_reside_join.reside GROUP BY freguesia, geom ORDER BY freguesia"')

        shape = QFileInfo(QgsApplication.qgisUserDatabaseFilePath()).path() + "/result.shp"
        subprocess.call('"C:\Program Files\PostgreSQL/12/bin/pgsql2shp.exe" -f ' + '"' + str(
            shape) + '" ' + '-h localhost -p ' + str(uri.port()) + ' -u ' + str(uri.username()) + ' -P ' + str(
            uri.password()) + ' ' + str(uri.database()) + ' "SELECT freguesia, sum(' + str(
            attribute) + '), geom FROM grande_porto LEFT OUTER JOIN sample_reside_join ON grande_porto.dicofre = sample_reside_join.reside GROUP BY freguesia, geom ORDER BY freguesia"')
        # subprocess.call('"C:\Program Files\PostgreSQL/12/bin/pgsql2shp.exe" -f ' + '"C:\Users\Lia\Desktop/categorized2.shp" ' + '-h localhost -p 5432 -u postgres -P postgres LIA ' + '"SELECT freguesia,(cnt_2/total::float)*100 perc_adm FROM (SELECT freguesia, count(*) total, sum(CASE WHEN adm_tip::integer = 2 THEN 1 ELSE 0 END) cnt_2, geom FROM grande_porto LEFT OUTER JOIN sample_reside_join ON grande_porto.dicofre = sample_reside_join.reside GROUP BY freguesia, geom) x ORDER BY freguesia"')
        #QMessageBox.about(self.dlg.checkBox, 'teste',
                          # '"C:\Program Files\PostgreSQL/12/bin/pgsql2shp.exe" -f ' + '"' + str(
                          #     shape) + '" ' + '-h localhost -p ' + str(uri.port()) + ' -u ' + str(
                          #     uri.username()) + ' -P ' + str(uri.password()) + str(
                          #     uri.database()) + ' "SELECT freguesia, mode(' + str(
                          #     attribute) + '), geom FROM grande_porto LEFT OUTER JOIN sample_reside_join ON grande_porto.dicofre = sample_reside_join.reside GROUP BY freguesia, geom ORDER BY freguesia"')

        # vdlayer = QgsVectorLayer(unicode("C:\Users\Lia\Desktop/categorized.shp").encode('utf8'), "average", "ogr")
        vdlayer = QgsVectorLayer(str(shape), "average", "ogr")
        fields_at = vdlayer.fields()
        self.field_names_at = fields_at.names()
        #QMessageBox.about(self.dlg.checkBox, 'teste', str(self.field_names_at))
        mode = self.field_names_at[1]
        # get values from attribute
        n = len(self.field_names_at)
        # QMessageBox.about(self.dlg.checkBox, 'teste', str(n))
        lista_attrib = []
        for i in range(0, n):
            f = self.field_names_at[i]
            # QMessageBox.about(self.dlg.checkBox, 'teste', str(f))
            if f == 'MODE':
                #QMessageBox.about(self.dlg.checkBox, 'teste', str(f))
                number = i
                for feat in vdlayer.getFeatures():
                    attrb = feat.attributes()
                    QMessageBox.about(self.dlg.checkBox, 'teste', str(attrb))
                    attribute_read = attrb[number]  # reads the attribute one by one
                    lista_attrib = lista_attrib + [str(attribute_read)]
        lista_attributes = lista_attrib
        #QMessageBox.about(self.dlg.checkBox, 'teste', str(lista_attributes))
        # list without duplicates
        woduplicates = list(set(lista_attributes))
        # QMessageBox.about(self.dlg.checkBox, 'teste', str(woduplicates))
        for index, ii in enumerate(woduplicates):
            if ii == 'NULL':
                woduplicates[index] = ' '

        # QMessageBox.about(self.dlg.checkBox, 'teste', str(woduplicates))

        # 'SELECT freguesia, adm_tip, CASE WHEN adm_tip='2' THEN count(adm_tip)/17::float*100 ELSE 0 END FROM grande_porto LEFT OUTER JOIN sample_reside_join ON grande_porto.dicofre = sample_reside_join.reside GROUP BY freguesia, adm_tip ORDER BY freguesia'

        # create tuple with the colors and the fields
        list_color = ["yellow", "darkcyan", "red", "grey"]
        # list_fields = woduplicates
        # list_fields = ['1', '2', '6', " "]
        # dicti = {'1':('yellow','1'), '2':('darkcyan','2'), '6':('red', '6'), '':("grey", ' ')}
        tuples = zip(list_color, woduplicates)
        # create dict with the tuples and the attributes
        attribute_sym = dict(zip(woduplicates, tuples))
        # QMessageBox.about(self.dlg.checkBox, 'teste', str(attribute_sym))
        # symbolize
        categories = []

        for code, (color, fields) in attribute_sym.items():
            sym = QgsSymbol.defaultSymbol(vdlayer.geometryType())
            sym.setColor(QColor(color))
            category = QgsRendererCategory(code, sym, fields)
            categories.append(category)
        # QMessageBox.about(self.dlg.checkBox, 'teste', str(categories))
        # self.field = self.dlg.comboBox.currentText()
        renderer = QgsCategorizedSymbolRenderer('MODE', categories)
        # renderer.setSourceColorRamp(ramp)
        vdlayer.setRenderer(renderer)
        # layer.setRendererV2(renderer)
        QgsProject.instance().addMapLayer(vdlayer)
        self.canvas = QgsMapCanvas()
        # self.canvas.scene().addItem(vdlayer)
        QgsProject.instance().addMapLayer(vdlayer)

        # self.canvas = QgsMapCanvas()
        # self.canvas.setExtent(layer.extent())
        # self.canvas.setLayerSet( [ QgsMapCanvasLayer(layer) ] )
        # self.setCentralWidget(self.canvas)

        if self.dlg.checkBox_2.isChecked():
            Processing.initialize()
            layer_limit = QFileInfo(QgsApplication.qgisUserDatabaseFilePath()).path() + "/layer_limit.shp"
            # QMessageBox.about(self.dlg.checkBox, 'teste', str(layer.source()))
            Processing.runAlgorithm("qgis:dissolve", None, layer, True, "None", layer_limit)
            l_limit = QgsVectorLayer(unicode(layer_limit).encode('utf8'), "layer_limit", "ogr")
            QgsMapLayerRegistry.instance().addMapLayer(l_limit)



    def symbology_graduated(self, layer):

        # connect to PostGIS database with the municipalities and the data table
        layer = iface.activeLayer()
        uri = QgsDataSourceUri()
        uri.setConnection("localhost", "5432", "MED", "postgres", "postgres")
        uri.setDataSource("public", "distritos", "geom", '', "gid")

        # now query the table
        db = QSqlDatabase.addDatabase("QPSQL");
        db.setDatabaseName(uri.database())
        db.setPort(int(uri.port()))
        db.setUserName(uri.username())
        db.setPassword(uri.password())
        db.open()

        attribute_choose = self.dlg.comboBox.currentText()
        level_choose = self.dlg.comboBox_5.currentText()
        pqi_choose = self.dlg.comboBox_6.currentText()
        ICD_choose = self.dlg.comboBox_8.currentText()
        year_choose = self.dlg.comboBox_7.currentText()

        #if self.dlg.comboBox_7.currentText()!='all':
        import os
        directory = 'C:\OSGeo4W64/apps\qgis\python\plugins\hcqi_tool'
        with open(os.path.join(directory, 'pqi.bat'), 'w') as OPATH:
            OPATH.writelines(['SET Path=%WINDIR%\system32;%WINDIR%;%WINDIR%\System32\Wbem;&','C:/"Program Files"/PostgreSQL/12/bin/pgsql2shp.exe -f C:/Users/Lia/AppData/Roaming/QGIS/QGIS3/profiles/default/layer_pqi2.shp -u postgres -P postgres MED "SELECT distritos.distrito,data_pqi.valor_pqi,geom FROM data_pqi INNER JOIN distritos ON data_pqi.geo=distritos.distrito WHERE (data_pqi.pqi=' + "'"+str(pqi_choose)+"'" + ' AND data_pqi.chrono=' + "'" + str(year_choose) +"'" + ' AND data_pqi.codificacao=' + "'" + str(ICD_choose) + "'" +') GROUP BY distritos.distrito, data_pqi.valor_pqi, data_pqi.chrono, distritos.geom ORDER BY distritos.distrito"'])
        # QMessageBox.about(self.dlg.checkBox, 'teste', str('yes'))
        #layer = QFileInfo(QgsApplication.qgisUserDatabaseFilePath()).path() + "/layer_average.shp"
        #os.system(os.path.join(QGIS_DIR, "python/plugins/hcqi_tool/average.bat"))
        os.system(os.path.join(QGIS_DIR, "python/plugins/hcqi_tool/pqi.bat"))
        layer = "C:/Users/Lia/AppData/Roaming/QGIS/QGIS3/profiles/default/layer_pqi2.shp"

        #vdlayer = QgsVectorLayer(str(layer), "layer", "ogr")
        # QgsMapLayerRegistry.instance().addMapLayer(vdlayer)

        layer_proj = "C:/Users/Lia/AppData/Roaming/QGIS/QGIS3/profiles/default/layer_pqi_proj_etrs89.shp"

        proj_layer = Processing.runAlgorithm("native:reprojectlayer",
                       {'INPUT': str(layer),
                        'TARGET_CRS': QgsCoordinateReferenceSystem('EPSG:3763'),
                        'OPERATION': '+proj=pipeline +step +proj=unitconvert +xy_in=deg +xy_out=rad +step +proj=tmerc +lat_0=39.6682583333333 +lon_0=-8.13310833333333 +k=1 +x_0=0 +y_0=0 +ellps=GRS80',
                        'OUTPUT': str(layer_proj)})

        vdlayer = QgsVectorLayer(str(layer_proj), "layer", "ogr")
        fields_at = vdlayer.fields()
        # QMessageBox.about(self.dlg.checkBox, 'teste', str(fields_at))
        self.field_names_at = fields_at.names()
        # QMessageBox.about(self.dlg.checkBox, 'teste', str(self.field_names_at))
        mean = self.field_names_at[1]

        # self.field = self.dlg.comboBox.currentText()
        # self.classes = self.dlg.spinBox.value()
        myRenderer = QgsGraduatedSymbolRenderer()
        myRenderer.setClassAttribute(mean)
        myRenderer.setMode(QgsGraduatedSymbolRenderer.EqualInterval)
        myRenderer.updateClasses(vdlayer, QgsGraduatedSymbolRenderer.EqualInterval, 5)
        myStyle = QgsStyle().defaultStyle()
        defaultColorRampNames = myStyle.colorRampNames()
        ramp = myStyle.colorRamp(defaultColorRampNames[5])

        myRenderer.updateColorRamp(ramp)
        vdlayer.setRenderer(myRenderer)
        QgsProject.instance().addMapLayer(vdlayer)



    def outputLayout(self):
        outputFile, encoding = QFileDialog.getSaveFileName(self.dlg,"saveFlle","layout.jpg",filter ="jpg (*.jpg *.)")
        self.dlg.lineEdit.setText(str(outputFile))

    def layout(self):
        # ___Create composition___
        # composition
        layerset = []
        # QgsMapLayerRegistry.instance().addMapLayer(RUSLE_color_raster)
        Processing.initialize()
        # reproject layer from 3857 to epsg 3763
        # layer_3763 = QFileInfo(QgsApplication.qgisUserDatabaseFilePath()).path() + "/layer_3763.shp"
        # Processing.runAlgorithm("qgis:reprojectlayer",None,self.layer,"EPSG:3763",layer_3763)
        # layer_etrs89 = QgsVectorLayer(unicode(layer_3763).encode('utf8'), "Grande Porto", "ogr")
        # QgsMapLayerRegistry.instance().addMapLayer(layer_etrs89)

        canvas = iface.mapCanvas()
        layers = canvas.layers()
        # QMessageBox.about(self.dlg.checkBox, 'teste', str(layers))
        for l in layers:
            layerset.append(l.id())
            layer = l
            #QMessageBox.about(self.dlg.checkBox, 'teste', str(layer))

        if layer==None:
            QMessageBox.information(None, "WARNING", str('There is no shapefile.'))

        extent_rect = layer.extent()
        # QMessageBox.about(self.dlg.checkBox, 'teste', str(extent_rect))

        xmin = extent_rect.xMinimum()
        xmax = extent_rect.xMaximum()
        ymin = extent_rect.yMinimum()
        ymax = extent_rect.yMaximum()

        extent = QgsRectangle(xmin, ymin, xmax, ymax)
        # QMessageBox.about(self.dlg.checkBox, 'teste', str(extent))

        #self.symbology_graduated(layer)

        # layerset.append(layer_etrs89.id())

        myMap = QgsMapSettings()

        actual_crs = layer.crs()
        #QMessageBox.about(self.dlg, 'teste', str(actual_crs))
        # map_proj = QgsCoordinateReferenceSystem(3763, QgsCoordinateReferenceSystem.PostgisCrsId)
        myMap.setDestinationCrs(actual_crs)
        myMap.setLayers(layers)
        mapRectangle = myMap.fullExtent()
        # QMessageBox.about(self.dlg.checkBox, 'teste', str(mapRectangle.xMinimum()))
        # QMessageBox.about(self.dlg.checkBox, 'teste', str(mapRectangle.xMaximum()))
        # QMessageBox.about(self.dlg.checkBox, 'teste', str(mapRectangle.yMinimum()))
        xmin = mapRectangle.xMinimum() - 5000
        xmax = mapRectangle.xMaximum() + 2000

        # mapRectangle.scale(0.5)
        # myMap.setExtent(mapRectangle)
        myMap.setExtent(mapRectangle)
        # myMap.setOutputSize(QSize(700,300))
        myMap.setOutputSize(QSize(950, 500))

        #initialize a new print layout
        p = QgsProject.instance()
        myComposition = QgsLayout(p)
        myComposition.initializeDefaults()
        #myComposition.setPlotStyle(QgsComposition.Print)

        mapp = QgsLayoutItemMap(myComposition)
        mapp.setRect(20,20,20,20)
        #myMap = QgsMapSettings()

        actual_crs = layer.crs()
        # QMessageBox.about(self.dlg, 'teste', str(actual_crs))
        # map_proj = QgsCoordinateReferenceSystem(3763, QgsCoordinateReferenceSystem.PostgisCrsId)
        mapp.setCrs(actual_crs)
        mapp.setLayers(layers)
        #mapRectangle = mapp.fullExtent()
        # QMessageBox.about(self.dlg.checkBox, 'teste', str(mapRectangle.xMinimum()))
        # QMessageBox.about(self.dlg.checkBox, 'teste', str(mapRectangle.xMaximum()))
        # QMessageBox.about(self.dlg.checkBox, 'teste', str(mapRectangle.yMinimum()))
        xmin = mapRectangle.xMinimum() - 5000
        xmax = mapRectangle.xMaximum() + 2000

        # mapRectangle.scale(0.5)
        # myMap.setExtent(mapRectangle)
        mapp.setExtent(mapRectangle)
        # myMap.setOutputSize(QSize(700,300))
        #mapp.setOutputSize(QSize(950, 500))
        myComposition.addItem(mapp)
        # myFile = str(self.plugin_dir) + '/template2.qpt'
        # myFile = str(self.plugin_dir) + '/template.qpt'

        # myTemplateFile = open(myFile, 'rt')
        # myTemplateContent = myTemplateFile.read()
        ####QMessageBox.about(self, "plano", myTemplateContent)
        # myTemplateFile.close()
        # myDocument = QtXml.QDomDocument()
        # myDocument.setContent(myTemplateContent)
        # myComposition.loadFromTemplate(myDocument)

        # x,y = 20,40
        x, y = 9, 9
        # paper A4
        # w,h = myComposition.paperWidth(), myComposition.paperHeight()
        #myComposition.setPaperSize(420, 297)
        # myComposition.setPaperSize(297,210)
        #w, h = myComposition.paperWidth(), myComposition.paperHeight()
        # QMessageBox.about(self.dlg.listWidget,'test', str(self.dlg.listWidget_4.currentItem().text()))
        # QMessageBox.about(self.dlg.checkBox,'test', str(h))
        # QMessageBox.about(self.dlg.checkBox,'test', str(w))
        # composerMap = QgsComposerMap(myComposition,x,y,w-30,h-70)
        # composerMap = QgsComposerMap(myComposition,x,y,w-121,h-114)
        # composerMap = QgsComposerMap(myComposition, x, y, w - 20, h - 27)
        # # composerMap.setNewExtent(extent)
        # # QMessageBox.about(self.dlg.checkBox, 'teste', str(composerMap.extent()))
        # composerMap.grid()
        # composerMap.grid().setGridLineWidth(0.1)
        # composerMap.grid().setIntervalX(10000)
        # composerMap.grid().setIntervalY(10000)
        # composerMap.grid().setAnnotationEnabled(True)
        # composerMap.grid().setAnnotationPosition(1, 0)
        # composerMap.grid().setAnnotationPosition(1, 1)
        # composerMap.grid().setAnnotationDirection(1, 0)
        # composerMap.grid().setAnnotationDirection(1, 1)
        # composerMap.grid().setFrameStyle(5)
        # myComposition.addComposerMap(composerMap)
        # composerMap.setLayerSet(myMap.layers())

        # legend
        legend = QgsLayoutItemLegend(myComposition)
        legend.setLinkedMap(mapp)
        # legend.model().setLayerSet(myMap.layers())
        # legend.model().setLayerSet
        myComposition.addItem(legend)
        # legend.displayName()
        # legend.setItemPosition(343.9, 239, 65.6, 25.9)
        # legend.setAutoUpdateModel(False)
        # legend.setLegendFilterByMapEnabled(True)
        # # QMessageBox.about(self.dlg.pushButton,'test', str(t))
        # legend.update()
        # legend.setItemPosition (100,122)
        # legend.setFrameEnabled(True)
        # legend.setScale(.7)

        # title
        title = QgsLayoutItemLabel(myComposition)
        # title.setText(str(self.dlg.listWidget_3.currentItem().text()))
        title.setText('PQI' + ' ' + str(self.dlg.comboBox.currentText()))
        title.setFont(QFont("Cambria", 40, QFont.Bold))
        #title.setItemPosition(140, 1)
        title.adjustSizeToText()
        # title.setMargin(-6)
        # title.setFrameEnabled(True)
        myComposition.addItem(title)

        # text_inf = "Prognostico" + "\n" + "Coordinate System: ETRS89 PTTM06" + '\n' + str(self.pr)
        # QMessageBox.about(self.dlg.listWidget,'test', str(text_inf))

        # information text
        # text = QgsComposerLabel(myComposition)
        # text.setText("Prognostico")
        # text.setFont(QFont("Cambria",15, QFont.Bold))
        # text.setItemPosition(328.2, 72.3, 87.7,102.3)
        # text.adjustSizeToText()
        ##title.setFrameEnabled(True)
        # myComposition.addItem(text)

        # arrow picture
        # pic_path = str(self.plugin_dir) + '/north.png'
        # pic = QgsComposerPicture(myComposition)
        # pic.setPictureFile(pic_path)
        # pic.setRotationMap(0)
        # pic.setSceneRect(QRectF(0, 0, 20, 20))
        # myComposition.addComposerPicture(pic)
        # pic.setItemPosition(2.2, 2.6)

        # attribute table
        # attr_table = QgsComposerAttributeTable(myComposition)
        # attr_table.setVectorLayer(layer_etrs89)
        # attr_table.setComposerMap(composerMap)
        # attr_table.setDisplayOnlyVisibleFeatures(True)
        # myComposition.addItem(attr_table)
        # attr_table.setItemPosition(330.7, 29.6, 77.5,24.7)

        # add scale bar
        item = QgsLayoutItemScaleBar(myComposition)
        item.setLinkedMap(mapp)
        myComposition.addItem(item)
        item.setStyle('Double Box')  # optionally modify the style
        # item.SegmentSizeMode('SegmentSizeFitWidth')
        #item.adjustBoxSize()
        # item.setNumSegments(4)
        item.setUnitLabel("km")
        # item.setNumMapUnitsPerScaleBarUnit(1)
        # item.setHeight(8)
        ##item.correctXPositionAlignment(10,10)
        item.applyDefaultSize()
        #item.setItemPosition(16.5, 256.4, 123.9, 20)
        item.update()

        # export layout
        # base_path = os.path.join(QgsProject.instance().homePath())
        # pdf_path = os.path.join(base_path, "output.pdf")
        output_jpeg = self.dlg.lineEdit.text()
        exporter = QgsLayoutExporter(myComposition)
        exporter.exportToPdf(output_jpeg, QgsLayoutExporter.PdfExportSettings())

        #POSTGIS_DIR = "C:\Program Files\PostgreSQL/12/bin/pgsql2shp.exe"

        # myImage = myComposition.printPageAsRaster(0)
        # myImage.save(output_jpeg)

        QMessageBox.information(None, "Layout created:", str("The layout was created"))
        # ___End composition___

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&HCQI Tool'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = HcqiToolDialog()
            self.dlg.pushButton_5.clicked.connect(self.handleButton)
            self.dlg.pushButton_6.clicked.connect(self.handleButtonbar)
            # add styles to combobox
            self.dlg.comboBox_2.addItems(['Categorized', 'Graduated'])
            self.dlg.comboBox_5.addItems(['District', 'NutsI', 'NutsII', 'NutsIII'])
            self.dlg.comboBox_8.addItems(['ICD9', 'ICD10'])
            self.icon_name = QGIS_DIR + '/python/plugins/hcqi_tool/color1.png'
            # self.dlg.comboBox_3.addItem(QIcon("C:/OSGeo4W64/apps/qgis/python/plugins/HospitalData/color1.png"), 'Color 1')
            # QMessageBox.about(self.dlg.checkBox, 'teste', str(self.icon_name))
            self.dlg.comboBox_3.addItem(QIcon(str(self.icon_name)), 'Color 1')
            self.dlg.pushButton.clicked.connect(self.classify)
            self.dlg.pushButton_7.clicked.connect(self.outputLayout)
            self.dlg.pushButton_2.clicked.connect(self.layout)
            self.dlg.pushButton_4.clicked.connect(self.addMap)


            self.inputLayer = QGIS_DIR + '/python/plugins/hcqi_tool/data_pqi.xlsx'
            self.layer = QgsVectorLayer(self.inputLayer, "distritos","ogr")
            fields = self.layer.fields()
            self.field_names = [field.name() for field in fields]
            #QMessageBox.about(self.dlg.checkBox, 'teste', str(self.field_names))
            self.dlg.comboBox.addItems(self.field_names)

            # add pqi and year to filter
            features_pqi = []
            features_year = []

            for feat in self.layer.getFeatures():
                features_pqi = features_pqi + [feat['pqi']]
                features_year = features_year + [feat['chrono']]

            self.dlg.comboBox_6.addItems(list(set(features_pqi)))
            self.dlg.comboBox_7.addItems(list(set(features_year)))



        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        # if result:
        #     # Do something useful here - delete the line containing pass and
        #     # substitute with your code.
        #     pass



class Window(QWidget, Ui_Dialog):
    def __init__(self, parent=None):
        QWidget.__init__(self, parent)
        self.setupUi(self)

class Window_bar(QWidget, Ui_Dialog2):
    def __init__(self, parent=None):
        QWidget.__init__(self, parent)
        self.setupUi(self)
